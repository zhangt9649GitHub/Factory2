package com.mingyuansoftware.aifactory.controller;

import com.github.pagehelper.Constant;
import com.github.pagehelper.PageHelper;
import com.mingyuansoftware.aifactory.config.LogConfig;
import com.mingyuansoftware.aifactory.constants.Constants;
import com.mingyuansoftware.aifactory.enums.ZtCode;
import com.mingyuansoftware.aifactory.model.Goods;
import com.mingyuansoftware.aifactory.model.InventoryCheck;
import com.mingyuansoftware.aifactory.model.InventoryCheckGoods;
import com.mingyuansoftware.aifactory.model.PDAInventoryCheckTask;
import com.mingyuansoftware.aifactory.model.dto.PDAInventoryCheckDto;
import com.mingyuansoftware.aifactory.pojo.CommonResponse;
import com.mingyuansoftware.aifactory.service.GoodsService;
import com.mingyuansoftware.aifactory.service.InventoryCheckService;
import com.mingyuansoftware.aifactory.service.StockKucunGoodsService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import net.sf.json.JSONArray;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @author 张婷
 * @date 2019/8/6 14:13
 */

@Api(value = "PDAInventoryCheck",description = "PDA盘点操作API",tags = {"PDA盘点操作"})
@RestController
@RequestMapping(value = "/PDaInventoryCheck")
public class PDAInventoryCheckController {

    @Autowired
    private InventoryCheckService inventoryCheckService;
    @Autowired
    private StockKucunGoodsService stockKucunGoodsService;
    @Autowired
    private GoodsService goodsService;

    @ApiOperation(value = "获取盘点操作任务列表", nickname = "selectPDaInventoryCheckTaskList", notes = "获取盘点操作任务列表", tags = {"@张婷"})
    @ApiImplicitParams({
            @ApiImplicitParam(name = "page", value = "第几页", paramType = "query", dataType = "int"),
            @ApiImplicitParam(name = "limit", value = "每页容量", paramType = "query", dataType = "int")
    })
    @RequestMapping(value = "/getPDaInventoryCheckTaskList", method = RequestMethod.GET)
    @ResponseBody
    public CommonResponse getPDaInventoryCheckTaskList(@Validated @RequestParam(defaultValue = "1") int page,
                                                      @Validated @RequestParam(defaultValue = "10") int limit) {
        CommonResponse response = new CommonResponse();
        try {
            PageHelper.startPage(page, limit);
            List<PDAInventoryCheckTask> pDaInventoryCheckTaskList =inventoryCheckService.selectPDaInventoryCheckTaskList();
            response.setMessage(ZtCode.SUCCESS_GET.getInfo());
            response.setCode(ZtCode.SUCCESS_GET.getCode());
            response.setData(pDaInventoryCheckTaskList);
        } catch (Exception e) {
            e.printStackTrace();
            response.setCode(ZtCode.FAIL_GET.getCode());
            response.setMessage(ZtCode.FAIL_GET.getInfo());
        }
        return response;
    }

    /*
            1.保存操作
            [{"goodsId":12732,"inventoryCheckId":8,"inventoryQuantity":5100,"staffId":15}]
        */

    @ApiOperation(value = "保存操作", nickname = "/updateInventoryCheck", notes = "盘点操作", tags = {"@张婷"})
    @ApiImplicitParam(name = "pdaInventoryCheckDtoList", value = "盘点实体类", required = true, dataType = "String")
    @RequestMapping(value = "/updateInventoryCheck", method = RequestMethod.POST)
    @ResponseBody
    public CommonResponse updateInventoryCheck(String pdaInventoryCheckDtoList) {
        CommonResponse response = new CommonResponse();
        try {
            JSONArray jsonArray = JSONArray.fromObject(pdaInventoryCheckDtoList);
            //Java集合
            List<PDAInventoryCheckDto> pdaInventoryCheckDtoList1 = (List<PDAInventoryCheckDto>) jsonArray.toCollection(jsonArray, PDAInventoryCheckDto.class);
            if(!(pdaInventoryCheckDtoList.isEmpty())){
                for(PDAInventoryCheckDto pdaInventoryCheckDto:pdaInventoryCheckDtoList1){
                    //根据盘点单Id和货物Id查询盘点单详情Id
                    Integer id = inventoryCheckService.selectInventoryCheckGoodsId(pdaInventoryCheckDto.getInventoryCheckId(),pdaInventoryCheckDto.getGoodsId());
                    pdaInventoryCheckDto.setInventoryCheckGoodsId(id);//设置查出来的盘点详情单Id
                    //根据盘点详情Id,员工Id和盘点数量修改货物盘点状态,盘点数量(盘盈,盘亏)以及盘点人  pda货物盘点状态 1.未盘点 2.已盘点
                    InventoryCheck inventoryCheck = inventoryCheckService.updateInventoryCheck(pdaInventoryCheckDto.getStaffId(),pdaInventoryCheckDto.getInventoryCheckGoodsId(),pdaInventoryCheckDto.getInventoryQuantity());
                    /*if(inventoryCheck == null){
                        response.setCode(ZtCode.FAIL_SAVE_PO.getCode());
                        response.setMessage(ZtCode.FAIL_SAVE_PO.getInfo());
                        return response;
                    }*/
                    //添加库存使用的数据
                    InventoryCheck inventoryCheck1 = inventoryCheckService.selectByPrimaryKey(pdaInventoryCheckDto.getInventoryCheckId());//根据盘点单Id查询仓库Id和盘点单编号
                    Goods goods = goodsService.selectGoodsById(pdaInventoryCheckDto.getGoodsId());//根据货物Id查询货物成本(货物的平均单价)
                    InventoryCheckGoods StockQuantity = inventoryCheckService.selectStockQuantityByGId(pdaInventoryCheckDto.getGoodsId(),inventoryCheck1.getWarehouseId());//根据货物Id和仓库Id查询货物的库存数量,
                    //库存数量和盘点数量进行比较:库存数量=盘点数量,没有盘盈或者盘亏,不需要添加库存
                    if(!(StockQuantity.getStockQuantity().compareTo(pdaInventoryCheckDto.getInventoryQuantity()) == 0)){
                        //添加库存货物数量  盘盈或者盘亏
                        Map<String,Object> parameters = new HashMap<>();
                        if(StockQuantity.getStockQuantity().compareTo(pdaInventoryCheckDto.getInventoryQuantity()) == -1){//库存数量<盘点数量
                            parameters.put("skgType","盘盈入库");
                            parameters.put("skgCount", pdaInventoryCheckDto.getInventoryQuantity().subtract(StockQuantity.getStockQuantity()));//添加盘盈数量:库存数量-盘点数量 surplus_quantity
                        }else {
                            parameters.put("skgType","盘亏出库");
                            parameters.put("skgCount", pdaInventoryCheckDto.getInventoryQuantity().subtract(StockQuantity.getStockQuantity()));//盘亏数量:盘点数量-库存数量 deficit_quantity
                        }
                        //仓库切换
                        if (LogConfig.warehouseType == 1){
                            //如果仓库类型是1,就是天津总库
                            parameters.put("warehouseId", Constants.WAREHOUSE_ID);
                        } else if(LogConfig.warehouseType==2) {
                            parameters.put("warehouseId", inventoryCheck1.getWarehouseId());
                        }
//                        parameters.put("skgType","库存盘点");
                        parameters.put("gid",pdaInventoryCheckDto.getGoodsId());
                        parameters.put("skgDanJia",goods.getAveragePrice());
                        parameters.put("skgSerialNumber",inventoryCheck1.getInventoryCheckNumber());
                        parameters.put("skgWanglaiDanwei","");
                        parameters.put("changeType","1");
                        stockKucunGoodsService.insertStockKucunGoods(parameters);
                    }
                }
            }
            response.setMessage(ZtCode.SUCCESS_SAVE.getInfo());
            response.setCode(ZtCode.SUCCESS_SAVE.getCode());
        } catch (Exception e) {
            e.printStackTrace();
            response.setCode(ZtCode.FAIL_SAVE.getCode());
            response.setMessage(ZtCode.FAIL_SAVE.getInfo());
        }
        return response;
    }
}
