package com.mingyuansoftware.aifactory.controller;

import com.github.pagehelper.PageHelper;
import com.mingyuansoftware.aifactory.config.LogConfig;
import com.mingyuansoftware.aifactory.constants.Constants;
import com.mingyuansoftware.aifactory.enums.ZtCode;
import com.mingyuansoftware.aifactory.model.*;
import com.mingyuansoftware.aifactory.model.dto.PDAPurchaseOrderDto;
import com.mingyuansoftware.aifactory.pojo.CommonResponse;
import com.mingyuansoftware.aifactory.service.GoodsService;
import com.mingyuansoftware.aifactory.service.PurchaseOrderDetailsService;
import com.mingyuansoftware.aifactory.service.PurchaseOrderService;
import com.mingyuansoftware.aifactory.service.StockKucunGoodsService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import net.sf.json.JSONArray;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @author 张婷
 * @date 2019/7/29 14:55
 */

@Api(value = "PDAPurchaseOrder",description = "PDA采购入库API",tags = {"PDA采购入库"})
@RestController
@RequestMapping(value = "/PDaPurchaseOrder")
public class PDAPurchaseOrderController {

    @Autowired
    private PurchaseOrderService purchaseOrderService;
    @Autowired
    private PurchaseOrderDetailsService purchaseOrderDetailsService;
    @Autowired
    private StockKucunGoodsService stockKucunGoodsService;
    @Autowired
    private GoodsService goodsService;

    @ApiOperation(value = "获取采购入库任务列表", nickname = "selectPDaPurchaseOrderTaskList", notes = "获取采购入库任务列表", tags = {"@张婷"})
    @ApiImplicitParams({
            @ApiImplicitParam(name = "page", value = "第几页", paramType = "query", dataType = "int"),
            @ApiImplicitParam(name = "limit", value = "每页容量", paramType = "query", dataType = "int"),
//            @ApiImplicitParam(name = "pdaPurchaseStorageTask", value = "采购入库实体类", paramType = "query", dataType = "PDAPurchaseStorageTask")
            @ApiImplicitParam(name = "pdaPurchaseStorageTask", value = "采购入库实体类", dataType = "PDAPurchaseStorageTask")
    })
    @RequestMapping(value = "/getPDaPurchaseOrderTaskList", method = RequestMethod.POST)
    @ResponseBody
    public CommonResponse getPDaPurchaseOrderTaskList(@Validated @RequestParam(defaultValue = "1") int page,
                                                      @Validated @RequestParam(defaultValue = "10") int limit,
//                                                      @Validated PDAPurchaseStorageTask pdaPurchaseStorageTask) {
                                                      @RequestBody PDAPurchaseStorageTask pdaPurchaseStorageTask) {
        CommonResponse response = new CommonResponse();
        try {
            PageHelper.startPage(page, limit);
            List<PDAPurchaseStorageTask> pDaPurchaseOrderTaskList =purchaseOrderService.selectPDaPurchaseOrderTaskList(pdaPurchaseStorageTask);
            response.setMessage(ZtCode.SUCCESS_GET.getInfo());
            response.setCode(ZtCode.SUCCESS_GET.getCode());
            response.setData(pDaPurchaseOrderTaskList);
        } catch (Exception e) {
            e.printStackTrace();
            response.setCode(ZtCode.FAIL_GET.getCode());
            response.setMessage(ZtCode.FAIL_GET.getInfo());
        }
        return response;
    }
    /*  {"purchaseOrderId":0,"purchaseOrderNumber":"131","staffId":0}   */

    @ApiOperation(value = "保存操作", nickname = "/updatePurchaseOrderDetailsStatus", notes = "修改(pda操作货物)入库状态入库状态  1.未入库 2.部分入库 3.已入库", tags = {"@张婷"})
    @ApiImplicitParam(name = "pdaPurchaseOrderDtoList", value = "采购入库详情实体类", required = true, dataType = "String")
    @RequestMapping(value = "/updatePurchaseOrderDetailsStatus", method = RequestMethod.POST)
    @ResponseBody
    public CommonResponse updatePurchaseOrderDetailsStatus(String pdaPurchaseOrderDtoList) {
        CommonResponse response = new CommonResponse();
        try {
            JSONArray jsonArray = JSONArray.fromObject(pdaPurchaseOrderDtoList);
            //Java集合
            List<PDAPurchaseOrderDto> pdaPurchaseOrderDtoList1 = (List<PDAPurchaseOrderDto>) jsonArray.toCollection(jsonArray, PDAPurchaseOrderDto.class);
            if(!(pdaPurchaseOrderDtoList.isEmpty())){
                for(PDAPurchaseOrderDto pdaPurchaseOrderDto:pdaPurchaseOrderDtoList1){
                    //采购订单的入库状态为3不能操作
                    int storageStatus = purchaseOrderService.selectStorage(pdaPurchaseOrderDto.getPurchaseOrderId());
                    if(storageStatus == 3){
                        response.setCode(ZtCode.FAIL_SAVE_PO.getCode());
                        response.setMessage(ZtCode.FAIL_SAVE_PO.getInfo());
                        return response;
                    }
                    //判断:如果采购订单货物的入库数量大于应该入库的数量,入库失败(入库数量不能大于需要入库的数量)
                    //采购订单Id和货物Id查询采购详情单内容(数量)
                    PurchaseOrderDetails purchaseOrderDetails = purchaseOrderDetailsService.selectPDaPurchaseOrderDetailsByProIdAndGoodsId(pdaPurchaseOrderDto.getPurchaseOrderId(),pdaPurchaseOrderDto.getGid());
                    //如果pda操作货物入库状态=2(已入库),不能继续操作
                    if(purchaseOrderDetails.getPodStorageState() == 2){
                        response.setCode(ZtCode.FAIL_SAVE_PO.getCode());
                        response.setMessage(ZtCode.FAIL_SAVE_PO.getInfo());
                        return response;
                    }
                    if(pdaPurchaseOrderDto.getSkgCount().compareTo(purchaseOrderDetails.getQuantity().subtract(purchaseOrderDetails.getInQuantity())) == 1){
                        response.setCode(ZtCode.FAIL_SAVE_COUNT.getCode());
                        response.setMessage(ZtCode.FAIL_SAVE_COUNT.getInfo());
                        return response;
                    }
                    Integer poId = purchaseOrderDetailsService.selectPoId(pdaPurchaseOrderDto.getPurchaseOrderId(),pdaPurchaseOrderDto.getGid());
                    pdaPurchaseOrderDto.setPurchaseOrderDetailsId(poId);
                    PurchaseOrder purchaseOrder = purchaseOrderDetailsService.updatePurchaseOrderDetailsStatus(pdaPurchaseOrderDto.getStaffId(),pdaPurchaseOrderDto.getPurchaseOrderDetailsId(),pdaPurchaseOrderDto.getSkgCount());
                    Goods goods = goodsService.selectGoodsById(pdaPurchaseOrderDto.getGid());
                    pdaPurchaseOrderDto.setWarehouseId(3);  //原料仓库Id
                    //添加库存
                    Map<String,Object> parameters = new HashMap<>();
                    parameters.put("skgCount",pdaPurchaseOrderDto.getSkgCount());
                    //仓库切换
                    if (LogConfig.warehouseType == 1){
                        //如果仓库类型是1,就是天津总库
                        parameters.put("warehouseId", Constants.WAREHOUSE_ID);
                    } else if(LogConfig.warehouseType==2) {
                        parameters.put("warehouseId", pdaPurchaseOrderDto.getWarehouseId());
                    }
                    parameters.put("skgType","采购入库");
                    parameters.put("gid",pdaPurchaseOrderDto.getGid());
                    parameters.put("skgDanJia",goods.getAveragePrice());
                    parameters.put("skgSerialNumber",purchaseOrder.getPurchaseOrderNumber());
                    parameters.put("skgWanglaiDanwei",goods.getSupplierName());
                    parameters.put("changeType","1");
                    stockKucunGoodsService.insertStockKucunGoods(parameters);
                }
            }

            response.setMessage(ZtCode.SUCCESS_SAVE.getInfo());
            response.setCode(ZtCode.SUCCESS_SAVE.getCode());
        } catch (Exception e) {
            e.printStackTrace();
            response.setCode(ZtCode.FAIL_SAVE.getCode());
            response.setMessage(ZtCode.FAIL_SAVE.getInfo());
        }
        return response;
    }

    /*
      [{"gid":18733,"purchaseOrderId":1,"skgCount":100,"staffId":15},{"gid":18734,"purchaseOrderId":1,"skgCount":150,"staffId":15}]
      [{"gid":18733,"purchaseOrderId":1,"skgCount":100,"staffId":15}]
    */

    /*@ApiOperation(value = "获取采购入库货物未入库货物列表", nickname = "/selectPDaPurchaseOrderDetailsGoodsList", notes = "获取采购入库货物列表", tags = {"@张婷"})
    @ApiImplicitParams({
            @ApiImplicitParam(name = "page", value = "第几页", paramType = "query", dataType = "int"),
            @ApiImplicitParam(name = "limit", value = "每页容量", paramType = "query", dataType = "int"),
            @ApiImplicitParam(name = "purchaseOrderId", value = "采购订单id", required = true, dataType = "int", paramType = "query")
    })
    @RequestMapping(value = "/getPDaPurchaseOrderDetailsGoodsList", method = RequestMethod.GET)
    @ResponseBody
    public CommonResponse getPDaPurchaseOrderDetailsGoodsList(@Validated @RequestParam(defaultValue = "1") int page,
                                                 @Validated @RequestParam(defaultValue = "10") int limit,
                                                 @Validated int purchaseOrderId) {
        CommonResponse response = new CommonResponse();
        try {
            PageHelper.startPage(page, limit);
            List<PurchaseOrderGoods> purchaseOrderGoodsList  =purchaseOrderDetailsService.selectPDaPurchaseOrderDetailsGoodsList(purchaseOrderId);
            int count = purchaseOrderDetailsService.selectPdaPurchaseOrderDetailsGoodsListCount(purchaseOrderId);
            response.setMessage(ZtCode.SUCCESS_GET.getInfo());
            response.setCode(ZtCode.SUCCESS_GET.getCode());
            response.setData(purchaseOrderGoodsList);
        } catch (Exception e) {
            e.printStackTrace();
            response.setCode(ZtCode.FAIL_GET.getCode());
            response.setMessage(ZtCode.FAIL_GET.getInfo());
        }
        return response;
    }*/

    /*@ApiOperation(value = "获取采购入库货物列表显示(已入库操作)", nickname = "/selectPDaGoodsList", notes = "获取采购入库货物列表", tags = {"@张婷"})
    @ApiImplicitParams({
            @ApiImplicitParam(name = "page", value = "第几页", paramType = "query", dataType = "int"),
            @ApiImplicitParam(name = "limit", value = "每页容量", paramType = "query", dataType = "int"),
            @ApiImplicitParam(name = "purchaseOrderId", value = "采购订单id", required = true, dataType = "int", paramType = "query")
    })
    @RequestMapping(value = "/getPDaGoodsList", method = RequestMethod.GET)
    @ResponseBody
    public CommonResponse getPDaGoodsList(@Validated @RequestParam(defaultValue = "1") int page,
                                                 @Validated @RequestParam(defaultValue = "10") int limit,
                                                 @Validated int purchaseOrderId) {
        CommonResponse response = new CommonResponse();
        try {
            PageHelper.startPage(page, limit);
            List<PurchaseOrderGoods> purchaseOrderGoodsList  =purchaseOrderDetailsService.selectPDaGoodsList(purchaseOrderId);
            response.setMessage(ZtCode.SUCCESS_GET.getInfo());
            response.setCode(ZtCode.SUCCESS_GET.getCode());
            response.setData(purchaseOrderGoodsList);
        } catch (Exception e) {
            e.printStackTrace();
            response.setCode(ZtCode.FAIL_GET.getCode());
            response.setMessage(ZtCode.FAIL_GET.getInfo());
        }
        return response;
    }*/

    /*   @ApiOperation(value = "获取采购入库采购订单列表", nickname = "selectPDaPurchaseOrderList", notes = "获取采购入库采购订单列表", tags = {"@张婷"})
    @ApiImplicitParams({
            @ApiImplicitParam(name = "page", value = "第几页", paramType = "query", dataType = "int"),
            @ApiImplicitParam(name = "limit", value = "每页容量", paramType = "query", dataType = "int")
    })
    @RequestMapping(value = "/getPDaPurchaseOrderList", method = RequestMethod.GET)
    @ResponseBody
    public CommonResponse ff(@Validated @RequestParam(defaultValue = "1") int page,
                                            @Validated @RequestParam(defaultValue = "10") int limit) {
        CommonResponse response = new CommonResponse();
        try {
            PageHelper.startPage(page, limit);
            List<PurchaseOrder> purchaseOrderList =purchaseOrderService.selectPDaPurchaseOrderList();
            response.setMessage(ZtCode.SUCCESS_GET.getInfo());
            response.setCode(ZtCode.SUCCESS_GET.getCode());
            response.setData(purchaseOrderList);
        } catch (Exception e) {
            e.printStackTrace();
            response.setCode(ZtCode.FAIL_GET.getCode());
            response.setMessage(ZtCode.FAIL_GET.getInfo());
        }
        return response;
    }*/

   /* @ApiOperation(value = "获取采购入库货物的数量", nickname = "/selectPurchaseStorageGoodsCount", notes = "获取采购入库货物的数量", tags = {"@张婷"})
    @ApiImplicitParams({
            @ApiImplicitParam(name = "goodsId", value = "货物id",  required = true,paramType = "query", dataType = "int"),
            @ApiImplicitParam(name = "purchaseOrderId", value = "采购订单id", required = true, dataType = "int", paramType = "query")
    })
    @RequestMapping(value = "/getPurchaseStorageGoodsCount", method = RequestMethod.POST)
    @ResponseBody
    public CommonResponse getPurchaseStorageGoodsCount(@Validated int goodsId,@Validated int purchaseOrderId) {
        CommonResponse response = new CommonResponse();
        try {
            PurchaseStorageGoods purchaseStorageGoods  =purchaseOrderDetailsService.selectPurchaseStorageGoodsCount(goodsId,purchaseOrderId);
            response.setMessage(ZtCode.SUCCESS_GET.getInfo());
            response.setCode(ZtCode.SUCCESS_GET.getCode());
            response.setData(purchaseStorageGoods);
        } catch (Exception e) {
            e.printStackTrace();
            response.setCode(ZtCode.FAIL_GET.getCode());
            response.setMessage(ZtCode.FAIL_GET.getInfo());
        }
        return response;
    }
*/

}
