package com.mingyuansoftware.aifactory.service.impl;

import com.mingyuansoftware.aifactory.mapper.*;
import com.mingyuansoftware.aifactory.model.*;

import com.mingyuansoftware.aifactory.model.dto.ProductionOrderDto;
import com.mingyuansoftware.aifactory.model.dto.StaffUserLoginDto;
import com.mingyuansoftware.aifactory.service.ProductionOrderService;
import com.mingyuansoftware.aifactory.util.MyException;
import org.apache.shiro.SecurityUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

@Service
public class ProductionOrderServiceImpl implements ProductionOrderService {

    @Autowired
    private ProductionOrderMapper productionOrderMapper;
    @Autowired
    private ProductionOrderDetailsMapper productionOrderDetailsMapper;
    @Autowired
    private BomFormMapper bomFormMapper;

    @Override
    public List<ProductionOrder> selectProductionOrderList(ProductionOrderDto productionOrderDto) {
        try{
            return productionOrderMapper.selectProductionOrderList(productionOrderDto);
        }catch (Exception e){
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public int selectCount(ProductionOrderDto productionOrderDto) {
        try{
          return productionOrderMapper.selectCount(productionOrderDto);
        }catch (Exception e){
            e.printStackTrace();
        }
        return 0;
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public void insertProductionOrder(ProductionOrder productionOrder) {
        productionOrder.setIsDelete((byte)0);
        //已创建
        productionOrder.setState((byte)1);
        productionOrder.setCreateTime(new Date());
       /* StaffUserLoginDto userLoginDto =(StaffUserLoginDto) SecurityUtils.getSubject().getSession().getAttribute("user");
        int staffId = userLoginDto.getStaffId();
        productionOrder.setStaffId(staffId);*/
        //勾选自动生成领料单 待修改
        if(productionOrder.getIsCreatePicking()==1){
            //@@@@@@要后补
        }
        productionOrderMapper.insert(productionOrder);
        int productionInstructionId= 0;
        for (ProductionOrderDetails productionOrderDetails:productionOrder.getProductionOrderDetailsList()
             ) {
            if(productionInstructionId==0){
                productionInstructionId = productionOrderDetails.getProductionInstructionId();
            }else if(productionInstructionId!=productionOrderDetails.getProductionInstructionId()){
               throw new MyException("新增失败,排产单内的货物必须属于同一批次");
            }
            BomForm bomForm = bomFormMapper.selectBomFormByGoodsId(productionOrderDetails.getGoodsId());
            if(bomForm==null){
                throw new MyException("新增失败,部品CD:"+productionOrderDetails.getPartsCd()+"的货物在BOM表单中未找到,请先创建此货物的Bom表单");
            }
            productionOrderDetails.setBomId(bomForm.getBomId());
            productionOrderDetails.setProductionOrderId(productionOrder.getProductionOrderId());
            productionOrderDetails.setInventoryQuantity(BigDecimal.ZERO);
            productionOrderDetails.setStatus((byte)1);
            productionOrderDetailsMapper.insert(productionOrderDetails);
        }


    }

    @Override
    public ProductionOrder selectProductionOrderById(int productionOrderId) {
        try{
            ProductionOrder productionOrder = productionOrderMapper.selectByPrimaryKey(productionOrderId);
            List<ProductionOrderDetails> productionOrderDetailsList = productionOrderDetailsMapper.selectProductionOrderDetailsById(productionOrderId);
            productionOrder.setProductionOrderDetailsList(productionOrderDetailsList);
            return productionOrder;
        }catch (Exception e){
            e.printStackTrace();
        }
        return null;
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public void deleteProductionOrderById(int productionOrderId) {
        productionOrderMapper.updateProductionOrderById(productionOrderId);
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public void updateProductionOrderInfo(ProductionOrder productionOrder) {
       ProductionOrder productionOrder1= productionOrderMapper.selectByPrimaryKey(productionOrder.getProductionOrderId());
        productionOrder1.setStaffId(productionOrder.getStaffId());
        productionOrder1.setUpdateTime(new Date());
        productionOrder1.setAddTime(productionOrder.getAddTime());
        productionOrderMapper.updateByPrimaryKey(productionOrder1);
        List<ProductionOrderDetails> productionOrderDetailsList = productionOrderDetailsMapper.selectProductionOrderDetailsById(productionOrder.getProductionOrderId());
        //排产单详情的修改暂定
        for (ProductionOrderDetails productionOrderDetails:productionOrderDetailsList
             ) {
            productionOrderDetailsMapper.deleteByPrimaryKey(productionOrderDetails.getProductionOrderDetailsId());
        }
        List<ProductionOrderDetails> productionOrderDetailsList1 =productionOrder.getProductionOrderDetailsList();
        int productionInstructionId= 0;
        for (ProductionOrderDetails productionOrderDetails:productionOrderDetailsList1
             ) {
            if(productionInstructionId==0){
                productionInstructionId = productionOrderDetails.getProductionInstructionId();
            }else if(productionInstructionId!=productionOrderDetails.getProductionInstructionId()){
                throw new MyException("编辑失败,排产单内的货物必须属于同一批次");
            }
            BomForm bomForm = bomFormMapper.selectBomFormByGoodsId(productionOrderDetails.getGoodsId());
            if(bomForm==null){
                throw new MyException("编辑失败,部品CD:"+productionOrderDetails.getPartsCd()+"的货物在BOM表单中未找到,请先创建此货物的Bom表单");
            }
            productionOrderDetails.setBomId(bomForm.getBomId());
            productionOrderDetails.setProductionOrderId(productionOrder.getProductionOrderId());
            productionOrderDetails.setInventoryQuantity(BigDecimal.ZERO);
            productionOrderDetails.setStatus((byte)1);
            productionOrderDetails.setStatus((byte)1);
            productionOrderDetailsMapper.insert(productionOrderDetails);
        }

    }

    @Override
    public List<PDAProductionEntryTask> selectPdaProductionEntryTaskList() {
        try{
            return productionOrderMapper.selectPdaProductionEntryTaskList();
        }catch (Exception e){
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public int selectPdaProductionEntryListTaskCount() {
        try{
            return productionOrderMapper.selectPdaProductionEntryListTaskCount();
        }catch (Exception e){
            e.printStackTrace();
        }
        return 0;
    }

    @Override
    public List<ProductionOrderInfo> selectProductionOrderInfoList() {
        try{
            return productionOrderMapper.selectProductionOrderInfoList();
        }catch (Exception e){
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public int selectCountProductionOrderInfoList() {
        try{
          return productionOrderMapper.selectCountProductionOrderInfoList();
        }catch (Exception e){
            e.printStackTrace();
        }
        return 0;
    }
}
