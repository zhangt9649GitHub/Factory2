package com.mingyuansoftware.aifactory.service.impl;


import com.mingyuansoftware.aifactory.constants.Constants;
import com.mingyuansoftware.aifactory.mapper.*;
import com.mingyuansoftware.aifactory.model.*;
import com.mingyuansoftware.aifactory.model.dto.PDAProductionEntryDto;
import com.mingyuansoftware.aifactory.model.dto.ProductionOrderDetailsDto;
import com.mingyuansoftware.aifactory.service.ProductionOrderDetailsService;
import com.mingyuansoftware.aifactory.util.CalculateQuantityUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.util.*;

@Service
public class ProductionOrderDetailsServiceImpl implements ProductionOrderDetailsService {

    @Autowired
    private ProductionOrderDetailsMapper productionOrderDetailsMapper;
    @Autowired
    private BomFormMapper bomFormMapper;
    @Autowired
    private BomFormDetailMapper bomFormDetailMapper;
    @Autowired
    private StockKucunGoodsMapper stockKucunGoodsMapper;


    @Override
    public List<ProductionOrderDetailsDto> selectProductionOrderDetailsList(ProductionOrderDetailsDto productionOrderDetailsDto) {
        try{
           return productionOrderDetailsMapper.selectProductionOrderDetailsList(productionOrderDetailsDto);
        }catch (Exception e){
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public int selectCountProductionOrderDetails(ProductionOrderDetailsDto productionOrderDetailsDto) {
        try{
          return productionOrderDetailsMapper.selectCountProductionOrderDetails(productionOrderDetailsDto);
        }catch (Exception e){
            e.printStackTrace();
        }
        return 0;
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public void updateProductionOrderDetailsIsRead(int productionOrderDetailsId) {
        productionOrderDetailsMapper.updateProductionOrderDetailsIsRead(productionOrderDetailsId);
    }

    @Override
    public List<ProductionPlanningAnalysis> selectProductionPlanningAnalysisList(ProductionPlanningAnalysis productionPlanningAnalysis) {
        //根据生产指示书查询所有准备要生产的货物
        List<ProductionPlanningAnalysis>  productionPlanningAnalysisList = productionOrderDetailsMapper.selectProductionPlanningAnalysisList(productionPlanningAnalysis);
        //成型品集合
        List<MoldingProduction> moldingProductionList = new ArrayList<>();
        //材料集合
        List<Material> materialList = new ArrayList<>();

        //遍历商品,获取组成商品的完成品的在库量，如果是多个取第一个
        for (ProductionPlanningAnalysis productionPlanningAnalysis1:productionPlanningAnalysisList
             ) {
            int goodsId =productionPlanningAnalysis1.getGoodsId();
            //根据货物id查询bom表单的bomId
          BomForm bomForm = bomFormMapper.selectBomFormByGoodsId(goodsId);
          //根据bomId查询组成此商品的货物集合
            if(bomForm == null){
                productionPlanningAnalysis1.setFinishedAmount(BigDecimal.ZERO);
                return productionPlanningAnalysisList;
            }
            List<BomFormDetail> bomFormDetailList =bomFormDetailMapper.selectBomFormDetailById(bomForm.getBomId());
            boolean flag = true;
            for (BomFormDetail bomFormDetail:bomFormDetailList
                 ) {
                //判断组成此货物的完成品
                if(flag){
                    if(bomFormDetail.getCategory()== Constants.GOODS_CATEGORY_HALF){
                        flag = false;
                        KucunGoods kucunGoods = stockKucunGoodsMapper.getStockKucunGoodsCountByGoodsId(bomFormDetail.getGoodId());
                        if(kucunGoods!=null){
                            productionPlanningAnalysis1.setFinishedAmount(kucunGoods.getSkgCount());
                        }else{
                            flag = true;
                        }
                    }
                }
                if(flag){
                    productionPlanningAnalysis1.setFinishedAmount(BigDecimal.ZERO);
                }
              //判断组成此货物的成型品
                if(bomFormDetail.getCategory()== Constants.GOODS_CATEGORY_MANUFACTURING){
                //根据货物id查询MoldingProduction
                    MoldingProduction moldingProduction = new MoldingProduction();
                    moldingProduction.setGoodsName(bomFormDetail.getGoodsName());
                    //任务量 商品的新加任务量*bom表单中对应的比例
                    BigDecimal taskAmount =productionPlanningAnalysis1.getNewTask().multiply(bomFormDetail.getQuantity());
                    moldingProduction.setTaskAmount(taskAmount);
                    moldingProduction.setCycle(bomFormDetail.getCycle());
                    BigDecimal shift = CalculateQuantityUtil.calculateShift(taskAmount,bomFormDetail.getCycle());
                    moldingProduction.setShift(shift);
                    //累计完成量 待定
                    KucunGoods kucunGoods = stockKucunGoodsMapper.getStockKucunGoodsCountByGoodsId(bomFormDetail.getGoodId());
                    if(kucunGoods!=null) {
                        moldingProduction.setCumulativeCompletion(kucunGoods.getSkgCount());
                    }else{
                        moldingProduction.setCumulativeCompletion(BigDecimal.ZERO);
                    }
                    moldingProductionList.add(moldingProduction);
                }
             //判断组成此货物的材料
                if(bomFormDetail.getCategory()== Constants.GOODS_CATEGORY_RAW_MATERIAL){
                    Material material = new Material();
                    material.setMaterial(bomFormDetail.getGoodsName());
                    //所需数量
                    BigDecimal amount =productionPlanningAnalysis1.getNewTask().multiply(bomFormDetail.getQuantity());
                    material.setAmount(amount);
                    materialList.add(material);
                }
            }

        }
        //最大集合名
        String maxListName = null;
       //将集合放入结果集
        for (ProductionPlanningAnalysis productionPlanningAnalysis1:productionPlanningAnalysisList
             ) {
            productionPlanningAnalysis1.setMoldingProductionList(moldingProductionList);
            productionPlanningAnalysis1.setMaterialList(materialList);
            int a = moldingProductionList.size();
            int b = materialList.size();
            int max =(a>=b)?a:b;
            if(max == a){
                maxListName = "moldingProductionList";
            }else if(max == b){
                maxListName = "materialList";
            }
            productionPlanningAnalysis1.setMaxListName(maxListName);
        }
        return productionPlanningAnalysisList;
    }

}
